# WHS Portal Project Instructions

## Project Context
This is a Workplace Health and Safety (WHS) portal for Cook Shire Council in Queensland, Australia. The portal is being developed using Plone 6.1 Content Management Framework as a Classic site.

**Project Structure:**
The WHSPortal project consists of multiple independent repositories housed in a common workspace directory (`/home/ceo/Development/WHSPortal/`):

- `csc/` - **csc.whs** (v0.9.20): Core WHS incident & hazard management addon [git: main branch]
- `csc.whstheme/` - **cook.whs.barceloneta** (v1.0.27): Custom theme with button-grid folder navigation [git: main branch]
- `csc.teams/` - **csc.teams**: Team listing addon with LDAP integration [git: main branch]
- `whs-content-import-tools/` - Content migration utilities (not a Plone addon) [git: main branch]

## Environment Details

### Development Server (whsportaldev)
- **OS**: Ubuntu 24.04 VM on local network
- **Access**: SSH as cscadmin user (key-based authentication configured)
- **Hostname**: whsportaldev
- **Plone Instance Path**: `/opt/plone`
- **Virtual Environment**: `/opt/plone/venv`
- **Start Command**: `/opt/plone/venv/bin/runwsgi -v /opt/plone/instance/etc/zope.ini`
- **Deployment Model**: Single instance running in screen session for direct console output
- **Reverse Proxy**: nginx at `/etc/nginx/sites-available/whsportal.cook.qld.gov.au`
- **Public URL**: https://whsportal.cook.qld.gov.au
- **User Access**: WHS Office staff provide feedback via public URL

### Local Development
- **OS**: Ubuntu VM on laptop (current session environment)
- **Purpose**: Code editing and development (cyber security role separation)
- **Sync Method**: SSH-based rsync to whsportaldev

### Team
- **Team Size**: 5 IT staff supporting 180 organizational staff
- **Role**: Manager of Information and Communication
- **Stakeholder**: WHS Office (provides requirements and feedback)

## Development Preferences

### Response Style
1. **Always provide clear, direct answers** - No vague responses
2. **Include step-by-step explanations** of reasoning and approach
3. **Critically review proposals** against best practices for the subject matter
4. **State clearly when something won't work** and explain why
5. **Provide practical action plans** with clear implementation steps
6. **Break down broad questions** into manageable parts

### Expertise Level
- Act as a domain expert (software developer, ICT manager, system administrator as appropriate)
- Apply deep reasoning at full capacity
- Validate conclusions against best practices and external references
- Consider constraints of small-to-medium local government IT operations

### Technical Approach
- Prioritize Plone 6.1 Classic site conventions and best practices
- Consider security implications (cyber security role separation in place)
- Account for small team constraints and maintainability
- Validate against Plone documentation and community standards

## Git Repository Structure

**IMPORTANT**: The WHSPortal workspace is NOT a single git repository. Each component is independently version-controlled:

### Active Repositories (each with own git)

1. **csc/** - [git repository]
   - Package: `csc.whs` (currently v0.10.27, profile v19)
   - Purpose: Core WHS incident & hazard reporting and management
   - **Content Types**:
     - `csc.whs.incident` - Workplace incidents with injury/damage (reporting view: `/@@report-incident`)
     - `csc.whs.hazard` - Workplace hazards and risks (reporting view: `/@@report-hazard`)
   - Features: Dexterity content types, custom browser views, workflows, LDAP integration, GPS mapping, 5Ã—5 risk matrix, email notifications, custom folder listings, interactive SVG body map
   - Built from: `pyproject.toml`
   - Recent: v0.10.27 Phase B Complete - Form enhancements, emergency services tracking, print view, validation improvements

2. **csc.whstheme/** - [git repository]
   - Package: `cook.whs.barceloneta` (v1.0.27)
   - Purpose: Custom Barceloneta theme extension
   - Features: Button-grid folder navigation, 12-color palette, file display in folders, LDAP member properties
   - Built from: `pyproject.toml`

3. **csc.teams/** - [git repository]
   - Package: `csc.teams` (v1.0.x)
   - Purpose: Team listing with LDAP integration
   - Features: User picker, auto-display of AD properties, flexible display options
   - Built from: `pyproject.toml`

4. **whs-content-import-tools/** - [git repository]
   - NOT a Plone addon - standalone Python tools
   - Purpose: Automated content migration from filesystem to Plone
   - Features: AI metadata extraction (Claude), collective.exportimport integration, 100% extraction success rate
   - Phase 5 status: Content import complete (8/8 batches + 8 new files prepared)
   - Repository: https://github.com/Cook-Shire-Council/whs-content-import-tools

5. **whsportal-deployment/** - [git repository] (Project Root)
   - Infrastructure repository for deployment scripts, configs, and documentation
   - Contains: `deploy-systemd.sh`, `sudoers.d-plone`, `plone.service`, `PROJECT_STATUS.md`, `.claude_instructions`
   - Created: 2025-10-13
   - Repository: https://github.com/Cook-Shire-Council/whsportal-deployment

### Virtual Environment Location
- **Location**: `/home/ceo/Development/WHSPortal/venv` (project root)
- **Purpose**: Shared virtual environment for all tools (import scripts, utilities)
- **Activation**: `source /home/ceo/Development/WHSPortal/venv/bin/activate`
- **Important**: whs-content-import-tools uses the PROJECT ROOT venv, not a local one
- **Libraries**: anthropic, docx2txt, openpyxl, python-pptx, etc.

## Development Workflow

### Automated Deployment (Current Method)
Use `deploy-systemd.sh` script for automated build-deploy-restart cycle:

```bash
# Deploy individual addons
./deploy-systemd.sh csc          # Deploy csc.whs only
./deploy-systemd.sh theme        # Deploy cook.whs.barceloneta only
./deploy-systemd.sh both         # Deploy both addons
```

**Script performs:**
1. Cleans previous builds
2. Builds wheel from pyproject.toml
3. Copies wheel to whsportaldev via SSH
4. Installs with pip --force-reinstall --no-deps
5. Restarts Plone via systemd (`sudo systemctl restart plone`)
6. Clears nginx cache
7. Verifies service is active and provides status

**Plone Instance Management (systemd):**
- Plone runs as systemd service: `plone.service`
- Check status: `ssh whsportaldev 'sudo systemctl status plone'`
- View logs: `ssh whsportaldev 'sudo journalctl -u plone -f'`
- Manual restart: `ssh whsportaldev 'sudo systemctl restart plone'`
- Log file: `/opt/plone/instance/var/log/instance.log`

**Prerequisites:**
- Systemd service configured (via `setup-systemd.sh`)
- Sudoers configured for passwordless `systemctl restart plone`

### Why Wheel Deployment
- Tests actual packaging (production-like)
- Proper version management
- Clean, repeatable process
- Catches packaging errors early
- Professional deployment method

### Vocabulary and Schema Changes
When updating Python code (vocabularies, schemas):
- No special upgrade step needed
- Changes are loaded at Plone startup
- Simply deploy with `./deploy-systemd.sh csc`
- Systemd restart automatically loads new code

## Git Workflow

### Committing Changes
Standard git workflow for local commits:

```bash
# Check status
cd /home/ceo/Development/WHSPortal/csc  # or other repo
git status

# Stage changes
git add -A  # or specific files

# Commit with message
git commit -m "Your commit message"
```

### Pushing to GitHub (Using GitHub CLI)
**Preferred method:** Use GitHub CLI (`gh`) for authentication and pushing:

```bash
# Push to remote (after committing)
cd /home/ceo/Development/WHSPortal/csc  # or other repo
gh repo sync  # Syncs current branch with remote

# OR use standard git push (gh handles authentication)
git push
```

**Important notes:**
- GitHub CLI (`gh`) is the standard method for this project
- Each repository (csc/, csc.whstheme/, csc.teams/, whs-content-import-tools/, project root) is independent
- Always push from within the specific repository directory
- Check remote status: `gh repo view --web` (opens GitHub in browser)

### Common Git Operations

```bash
# View recent commits
git log --oneline -10

# Check what will be pushed
git log origin/main..HEAD

# View commit details
git show <commit-hash>

# Check remote status
git remote -v
gh repo view
```

## Development Standards
- Follow Plone addon development best practices
- Maintain clean separation between theme and functionality
- Consider Australian local government context and requirements
- Prioritize workplace health and safety use cases

## AI-Assisted Development Tracking

**IMPORTANT**: When implementing features or changes documented in implementation plans, track actual development time vs estimated time:

### Time Tracking Protocol
1. **At Start of Work Session**: Note the start time for the implementation task
2. **During Implementation**: Track time spent on each phase/component
3. **At Completion**: Calculate total actual time spent (your time + AI coding time)
4. **Record in PROJECT_STATUS.md**: Update the relevant section with:
   - **Estimated Time**: From the implementation plan
   - **Actual Time**: Total collaborative development time
   - **Breakdown**: Time split between planning, coding, testing, deployment
   - **Productivity Gain**: Calculate efficiency improvement percentage

### Example Recording Format
```
**Implementation Metrics (AI-Assisted):**
- Estimated Time: 8-10 hours (traditional development)
- Actual Time: 3.5 hours total
  - Planning/Review: 0.5 hours
  - Coding (AI-assisted): 1.5 hours
  - Testing: 1.0 hours
  - Deployment: 0.5 hours
- Productivity Gain: 65-71% time savings
- AI Contribution: Automated code generation, schema updates, template modifications
```

### Purpose
This tracking enables Cook Shire Council to:
- Quantify productivity improvements from AI-assisted development
- Build accurate estimates for future AI-assisted projects
- Demonstrate ROI of AI collaboration to stakeholders
- Identify which development phases benefit most from AI assistance

### Where to Record
- **PROJECT_STATUS.md**: Add time tracking metrics to each phase/version entry
- **WHSOfficer_Requests.md**: Update individual request entries with actual vs estimated time
- **Session Summary**: Include brief time summary in "Recent Session Work" sections

## Current Development Status (Updated: 2025-10-20)

### **Phase A: Division â†’ Department Field - COMPLETE âœ…**
- **Version**: csc.whs v0.10.18.7 (Profile v18)
- **Status**: All 10 phases complete, tested, and deployed
- **Deployment Date**: October 19, 2025
- **WHS Officer Request**: #1 - Replace Division with Department field

**All Phases Complete:**
- âœ… Phase 1: Department Vocabulary (26 departments)
- âœ… Phase 2: Schema Updates (IIncident, IHazard)
- âœ… Phase 3: LDAP Auto-Population (JavaScript integration)
- âœ… Phase 4: Form Templates Updated
- âœ… Phase 5: Intake Processing
- âœ… Phase 6: View Templates (incident.pt, hazard.pt) - Created view_helpers.py
- âœ… Phase 7: Email Notifications
- âœ… Phase 8: Data Migration (Profile v17â†’v18 upgrade step)
- âœ… Phase 9: Testing (all UAT verified by user)
- âœ… Phase 10: Documentation & Deployment

**Key Achievements:**
- 15 files modified, 1 new file created (view_helpers.py for TAL security)
- Resolved "Insufficient Privileges" TAL security error by creating registered browser view
- LDAP auto-population working for incidents
- Manual selection working for hazards
- Department displays as full names (not tokens) in all views and emails
- All user testing verified successfully

**Issues Identified During Testing:**
- 3 new UX enhancement requests documented in Form_Enhancement_Implementation.md
  1. Department dropdown alphabetical sorting
  2. Missing "Return to home" link in hazard form
  3. Enhanced mandatory field validation feedback

### **Phase B: Form Enhancements & UX Improvements - COMPLETE âœ…**
- **Version**: csc.whs v0.10.20-v0.10.27 (Profile v19 maintained)
- **Status**: All 8 enhancements complete, tested, and deployed
- **Completion Date**: October 20, 2025
- **WHS Officer Requests**: #2, #3, #4, #5, #6, #7, #8, #9

**All Enhancements Complete:**
- âœ… Request #2: Section 3 Enhancements (title auto-gen, description/immediate_actions required)
- âœ… Request #3: Question Numbering (Q13-Q30 systematic renumbering)
- âœ… Request #4: Emergency Services to Section 3 (Q16-Q17 with conditional logic)
- âœ… Request #5: Plant Number Field (Q27 in Property Damage section)
- âœ… Request #6: Department Dropdown Alphabetical Sorting
- âœ… Request #7: Return to Home Link (fixed auto-reset bug)
- âœ… Request #8: Enhanced Mandatory Field Validation (~400 lines validation CSS)
- âœ… Request #9: Print View Functionality (447 lines print_view.css)

**Key Achievements:**
- 11 files modified, 1 new file created (print_view.css)
- ~1,000+ lines of code added across all enhancements
- Profile 19 maintained through v0.10.20-0.10.27
- All testing verified by WHS Officer
- Emergency services tracking with conditional display
- Professional print layout for incidents and hazards
- Comprehensive validation feedback system

**Version Progression:**
- v0.10.19: CSV Export (baseline)
- v0.10.20-0.10.21: Form enhancements and validation
- v0.10.22: Return to home link fix
- v0.10.23-0.10.26: Print view development
- v0.10.27: Final Phase B deployment (CURRENT)

**Next Phase**: Monitor user feedback and plan future enhancements

### **Phase 2: Interactive Body Map & View Enhancements - COMPLETE âœ…**
- **Version**: csc.whs v0.10.17 (Profile v17)
- **Status**: Deployed to whsportaldev server
- **Latest Commit**: v0.10.17 "Document Phase 1 Security Implementation"

**Phase 2 Achievements (v0.10.4 - v0.10.16)**:
- âœ… **Enhanced CSS Checkbox Grid Layout** (v0.10.4)
  - Multi-column responsive display (2-4 columns)
  - 50% reduction in vertical space for 38 body areas
  - Full accessibility support
  - 207 lines of CSS added

- âœ… **Interactive SVG Body Map** (v0.10.5-v0.10.14)
  - 38 clickable body regions with front/back views
  - Toggle functionality between body map and checkbox list
  - Bidirectional synchronization (SVG â†” checkboxes)
  - Selection counter with real-time updates
  - Full keyboard navigation and ARIA support
  - Mobile-optimized touch targets
  - 294 lines of JavaScript + 276 lines of CSS + SVG diagram

- âœ… **Legacy Fields Hidden** (v0.10.15)
  - 5 deprecated fields hidden from edit forms using `directives.omitted()`
  - Full backwards compatibility maintained

- âœ… **Incident View Template Enhanced** (v0.10.15)
  - Complete display of all Phase 1 fields
  - Section 3 expanded with injury details
  - Section 4 added for property damage
  - Section 4B added for preliminary observations
  - Conditional section visibility

- âœ… **Additional People Section Improvements** (v0.10.16)
  - Section renamed for clarity
  - Conditional display (only show if data exists)
  - Individual field conditionals
  - WHS Officer verified and approved

**Code Contribution**:
- ~1,894 lines of code added across both phases
- 20+ files modified/created
- Full documentation updated

### **Phase 1: Enhanced Incident Form - COMPLETE âœ…**
- **Version**: csc.whs v0.10.3 (Profile v17)
- **Status**: Deployed and integrated with Phase 2
- **Commit**: 48d1b2e "Phase 1 Complete: Enhanced Incident Form v0.10.3 (Profile v17)"

**Achievements**:
- âœ… 11 new schema fields added (injury detail, property damage, preliminary observations)
- âœ… 5 new vocabularies with 38 body areas, 13 injury types, 9 property types
- âœ… Anonymous form expanded from 4 to 7 sections
- âœ… Conditional section visibility (auto-skip irrelevant sections)
- âœ… Notifiable incident warning for WorkSafe QLD
- âœ… Full backwards compatibility maintained
- âœ… ~1,024 lines of code added across 13 files

### **Next Steps - Stakeholder Feedback Phase**
- Gather feedback from WHS Officer on Phase 2 enhancements
- Gather feedback from ELT and other stakeholders
- Document feedback and prioritize Phase 3 features (if needed)
- Plan production deployment timeline
- Consider Phase 3 enhancements based on stakeholder input

## Quick Start Guide for New Work Sessions

When starting work on the WHSPortal project, check these files in order:

1. **PROJECT_STATUS.md** (project root) - Overall project status and recent changes (v0.10.17)
2. **This file** (.claude_instructions) - Development workflow and current status
3. **csc/README.md** - csc.whs addon features and version history (v0.10.17)
4. **Division_to_Department_Implementation.md** - Phase A implementation plan (in progress)
4. **Phase_2_csc.whs_form_update_implementation_plan.md** - Phase 2 implementation plan and tracking
5. **INCIDENT_FORM_PHASE1_CHANGES.md** - Phase 1 implementation details
6. **ANONYMOUS_FORM_UPDATE_SUMMARY.md** - Anonymous form deployment guide
6. **Git status in addon directories** - Check for uncommitted changes:
   ```bash
   cd /home/ceo/Development/WHSPortal/csc && git status
   cd /home/ceo/Development/WHSPortal/csc.whstheme && git status
   cd /home/ceo/Development/WHSPortal/csc.teams && git status
   cd /home/ceo/Development/WHSPortal/whs-content-import-tools && git status
   ```

## Key Project Files Reference

**Documentation:**
- `PROJECT_STATUS.md` - Overall project status, version timeline, demo features
- `HAZARD_IMPLEMENTATION_STATUS.md` - Hazard reporting system details
- `csc/README.md` - csc.whs addon documentation
- Various implementation docs (form_update_implementation.md, etc.)

**Deployment & Infrastructure:**
- `deploy-systemd.sh` - Main deployment script (automated wheel deployment + nginx cache clear)
- `setup-systemd.sh` - Systemd service setup
- `sudoers.d-plone` - Passwordless sudo configuration
- `plone.service` - Systemd service definition
- `whsportal.cook.qld.gov.au` - Nginx reverse proxy configuration

**Utility Scripts:**
- `fix_ldap_mappings.py` - LDAP configuration utility
- `restore_ldap_mappings.py` - LDAP restore utility
- `run_upgrade.py` - GenericSetup profile upgrade utility

**Content Import Tools:**
- `whs-content-import-tools/import_scripts/check_new_files.py` - Compare filesystem vs Plone to identify new content
- Shows which files are new, existing, or possibly modified
- Essential for pre-import validation and avoiding duplicates
